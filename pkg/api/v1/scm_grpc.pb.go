// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScmServiceClient is the client API for ScmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScmServiceClient interface {
	// StartLocalContract starts a Contract on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the scm/config.yaml
	//   3. all bytes constituting the Contract YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalContract(ctx context.Context, opts ...grpc.CallOption) (ScmService_StartLocalContractClient, error)
	// StartFromPreviousContract starts a new Contract based on a previous one.
	// If the previous Contract does not have the can-replay condition set this call will result in an error.
	StartFromPreviousContract(ctx context.Context, in *StartFromPreviousContractRequest, opts ...grpc.CallOption) (*StartContractResponse, error)
	// StartContractRequest starts a new Contract based on its specification.
	StartContract(ctx context.Context, in *StartContractRequest, opts ...grpc.CallOption) (*StartContractResponse, error)
	// Searches for Contract(s) known to this instance
	ListContracts(ctx context.Context, in *ListContractsRequest, opts ...grpc.CallOption) (*ListContractsResponse, error)
	// Subscribe listens to new Contract(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ScmService_SubscribeClient, error)
	// GetContract retrieves details of a single Contract
	GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*GetContractResponse, error)
	// Listen listens to Contract updates and log output of a running Contract
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (ScmService_ListenClient, error)
	// StopContract stops a currently running Contract
	StopContract(ctx context.Context, in *StopContractRequest, opts ...grpc.CallOption) (*StopContractResponse, error)
}

type scmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScmServiceClient(cc grpc.ClientConnInterface) ScmServiceClient {
	return &scmServiceClient{cc}
}

func (c *scmServiceClient) StartLocalContract(ctx context.Context, opts ...grpc.CallOption) (ScmService_StartLocalContractClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScmService_ServiceDesc.Streams[0], "/v1.ScmService/StartLocalContract", opts...)
	if err != nil {
		return nil, err
	}
	x := &scmServiceStartLocalContractClient{stream}
	return x, nil
}

type ScmService_StartLocalContractClient interface {
	Send(*StartLocalContractRequest) error
	CloseAndRecv() (*StartContractResponse, error)
	grpc.ClientStream
}

type scmServiceStartLocalContractClient struct {
	grpc.ClientStream
}

func (x *scmServiceStartLocalContractClient) Send(m *StartLocalContractRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scmServiceStartLocalContractClient) CloseAndRecv() (*StartContractResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartContractResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scmServiceClient) StartFromPreviousContract(ctx context.Context, in *StartFromPreviousContractRequest, opts ...grpc.CallOption) (*StartContractResponse, error) {
	out := new(StartContractResponse)
	err := c.cc.Invoke(ctx, "/v1.ScmService/StartFromPreviousContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scmServiceClient) StartContract(ctx context.Context, in *StartContractRequest, opts ...grpc.CallOption) (*StartContractResponse, error) {
	out := new(StartContractResponse)
	err := c.cc.Invoke(ctx, "/v1.ScmService/StartContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scmServiceClient) ListContracts(ctx context.Context, in *ListContractsRequest, opts ...grpc.CallOption) (*ListContractsResponse, error) {
	out := new(ListContractsResponse)
	err := c.cc.Invoke(ctx, "/v1.ScmService/ListContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scmServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ScmService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScmService_ServiceDesc.Streams[1], "/v1.ScmService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &scmServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ScmService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type scmServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *scmServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scmServiceClient) GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*GetContractResponse, error) {
	out := new(GetContractResponse)
	err := c.cc.Invoke(ctx, "/v1.ScmService/GetContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scmServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (ScmService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScmService_ServiceDesc.Streams[2], "/v1.ScmService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &scmServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ScmService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type scmServiceListenClient struct {
	grpc.ClientStream
}

func (x *scmServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scmServiceClient) StopContract(ctx context.Context, in *StopContractRequest, opts ...grpc.CallOption) (*StopContractResponse, error) {
	out := new(StopContractResponse)
	err := c.cc.Invoke(ctx, "/v1.ScmService/StopContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScmServiceServer is the server API for ScmService service.
// All implementations must embed UnimplementedScmServiceServer
// for forward compatibility
type ScmServiceServer interface {
	// StartLocalContract starts a Contract on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the scm/config.yaml
	//   3. all bytes constituting the Contract YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalContract(ScmService_StartLocalContractServer) error
	// StartFromPreviousContract starts a new Contract based on a previous one.
	// If the previous Contract does not have the can-replay condition set this call will result in an error.
	StartFromPreviousContract(context.Context, *StartFromPreviousContractRequest) (*StartContractResponse, error)
	// StartContractRequest starts a new Contract based on its specification.
	StartContract(context.Context, *StartContractRequest) (*StartContractResponse, error)
	// Searches for Contract(s) known to this instance
	ListContracts(context.Context, *ListContractsRequest) (*ListContractsResponse, error)
	// Subscribe listens to new Contract(s) updates
	Subscribe(*SubscribeRequest, ScmService_SubscribeServer) error
	// GetContract retrieves details of a single Contract
	GetContract(context.Context, *GetContractRequest) (*GetContractResponse, error)
	// Listen listens to Contract updates and log output of a running Contract
	Listen(*ListenRequest, ScmService_ListenServer) error
	// StopContract stops a currently running Contract
	StopContract(context.Context, *StopContractRequest) (*StopContractResponse, error)
	mustEmbedUnimplementedScmServiceServer()
}

// UnimplementedScmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScmServiceServer struct {
}

func (UnimplementedScmServiceServer) StartLocalContract(ScmService_StartLocalContractServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalContract not implemented")
}
func (UnimplementedScmServiceServer) StartFromPreviousContract(context.Context, *StartFromPreviousContractRequest) (*StartContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousContract not implemented")
}
func (UnimplementedScmServiceServer) StartContract(context.Context, *StartContractRequest) (*StartContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartContract not implemented")
}
func (UnimplementedScmServiceServer) ListContracts(context.Context, *ListContractsRequest) (*ListContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContracts not implemented")
}
func (UnimplementedScmServiceServer) Subscribe(*SubscribeRequest, ScmService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedScmServiceServer) GetContract(context.Context, *GetContractRequest) (*GetContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContract not implemented")
}
func (UnimplementedScmServiceServer) Listen(*ListenRequest, ScmService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedScmServiceServer) StopContract(context.Context, *StopContractRequest) (*StopContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContract not implemented")
}
func (UnimplementedScmServiceServer) mustEmbedUnimplementedScmServiceServer() {}

// UnsafeScmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScmServiceServer will
// result in compilation errors.
type UnsafeScmServiceServer interface {
	mustEmbedUnimplementedScmServiceServer()
}

func RegisterScmServiceServer(s grpc.ServiceRegistrar, srv ScmServiceServer) {
	s.RegisterService(&ScmService_ServiceDesc, srv)
}

func _ScmService_StartLocalContract_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScmServiceServer).StartLocalContract(&scmServiceStartLocalContractServer{stream})
}

type ScmService_StartLocalContractServer interface {
	SendAndClose(*StartContractResponse) error
	Recv() (*StartLocalContractRequest, error)
	grpc.ServerStream
}

type scmServiceStartLocalContractServer struct {
	grpc.ServerStream
}

func (x *scmServiceStartLocalContractServer) SendAndClose(m *StartContractResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scmServiceStartLocalContractServer) Recv() (*StartLocalContractRequest, error) {
	m := new(StartLocalContractRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ScmService_StartFromPreviousContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScmServiceServer).StartFromPreviousContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ScmService/StartFromPreviousContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScmServiceServer).StartFromPreviousContract(ctx, req.(*StartFromPreviousContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScmService_StartContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScmServiceServer).StartContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ScmService/StartContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScmServiceServer).StartContract(ctx, req.(*StartContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScmService_ListContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScmServiceServer).ListContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ScmService/ListContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScmServiceServer).ListContracts(ctx, req.(*ListContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScmService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScmServiceServer).Subscribe(m, &scmServiceSubscribeServer{stream})
}

type ScmService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type scmServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *scmServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ScmService_GetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScmServiceServer).GetContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ScmService/GetContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScmServiceServer).GetContract(ctx, req.(*GetContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScmService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScmServiceServer).Listen(m, &scmServiceListenServer{stream})
}

type ScmService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type scmServiceListenServer struct {
	grpc.ServerStream
}

func (x *scmServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ScmService_StopContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScmServiceServer).StopContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ScmService/StopContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScmServiceServer).StopContract(ctx, req.(*StopContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScmService_ServiceDesc is the grpc.ServiceDesc for ScmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ScmService",
	HandlerType: (*ScmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousContract",
			Handler:    _ScmService_StartFromPreviousContract_Handler,
		},
		{
			MethodName: "StartContract",
			Handler:    _ScmService_StartContract_Handler,
		},
		{
			MethodName: "ListContracts",
			Handler:    _ScmService_ListContracts_Handler,
		},
		{
			MethodName: "GetContract",
			Handler:    _ScmService_GetContract_Handler,
		},
		{
			MethodName: "StopContract",
			Handler:    _ScmService_StopContract_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalContract",
			Handler:       _ScmService_StartLocalContract_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ScmService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _ScmService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scm.proto",
}
